{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`xhr-simple-request`\nA XHR request that works with API components.\n\nThis is a copy of `iron-request` element from PolymerElements library but\nadjusted to work with `API request` object (or ARC request object).\n\nIt also handles custom events related to request flow.",
      "summary": "",
      "path": "xhr-simple-request-transport.html",
      "properties": [
        {
          "name": "isPayload",
          "type": "boolean",
          "description": "Set to true when the request can carry a payload.\nIt's required for calculating headers errors.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "xhr",
          "type": "XMLHttpRequest",
          "description": "A reference to the XMLHttpRequest instance used to generate the\nnetwork request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 35,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "response",
          "type": "*",
          "description": "A reference to the parsed response body, if the `xhr` has completely\nresolved.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 8
            },
            "end": {
              "line": 50,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "headers",
          "type": "string",
          "description": "A reference to response headers, if the `xhr` has completely\nresolved.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "status",
          "type": "number",
          "description": "A reference to the status code, if the `xhr` has completely resolved.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 8
            },
            "end": {
              "line": 71,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "statusText",
          "type": "string",
          "description": "A reference to the status text, if the `xhr` has completely resolved.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 80,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "completes",
          "type": "Promise",
          "description": "A promise that resolves when the `xhr` response comes back, or rejects\nif there is an error before the `xhr` completes.\nThe resolve callback is called with the original request as an argument.\nBy default, the reject callback is called with an `Error` as an argument.\nIf `rejectWithRequest` is true, the reject callback is called with an\nobject with two keys: `request`, the original request, and `error`, the\nerror object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "progress",
          "type": "Object",
          "description": "An object that contains progress information emitted by the XHR if\navailable.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 8
            },
            "end": {
              "line": 116,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "aborted",
          "type": "boolean",
          "description": "Aborted will be true if an abort of the request is attempted.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "errored",
          "type": "boolean",
          "description": "Errored will be true if the browser fired an error event from the\nXHR object (mainly network errors).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 135,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "timedOut",
          "type": "boolean",
          "description": "TimedOut will be true if the XHR threw a timeout event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 144,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "startTime",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "filterHeaders",
          "description": "Filter array of headers and return not duplicated array of the same headers.\nDuplicated headers should be appended to already found one using coma separator.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headers",
              "type": "Array",
              "description": "Headers array to filter. All objects in headers array must have \"name\"\n               and \"value\" keys."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "An array of filtered headers."
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "headersToString",
          "description": "Parse headers array to Raw HTTP headers string.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headersArray",
              "type": "(Array | String | Headers)",
              "description": "List of objects with \"name\" and \"value\"\nproperties."
            }
          ],
          "return": {
            "type": "String",
            "desc": "A HTTP representation of the headers."
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "headerItemToString",
          "description": "Transforms a header model item to a string.\nArray values are supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "header",
              "type": "Object",
              "description": "Object with name and value."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Generated headers line"
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "headersToJSON",
          "description": "Parse HTTP headers input from string to array of objects containing `name` and `value`\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headers",
              "type": "(String | Headers)",
              "description": "Raw HTTP headers input or Headers object"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "The array of objects where properties are `name` as a header\nname and `value` as a header content."
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "_headersStringToJSON",
          "description": "Parse headers string to array of objects.\nSee `#toJSON` for more info.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 153,
              "column": 4
            },
            "end": {
              "line": 185,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headersString"
            }
          ],
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "_hedersToJSON",
          "description": "Parse Headers object to array of objects.\nSee `#toJSON` for more info.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 213,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headers"
            }
          ],
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "_oldCombine",
          "description": "Helper method for old system: combine headers list with encoding value.\nNote that this function will update the original array.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 223,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headers",
              "type": "Array",
              "description": "An array of headers"
            },
            {
              "name": "encoding",
              "type": "String",
              "description": "An encoding string from the old request."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if encoding has been added to the array."
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "getContentType",
          "description": "Get the Content-Type value from the headers.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 245,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headers",
              "type": "(Array | String)",
              "description": "Either HTTP headers string or list of headers."
            }
          ],
          "return": {
            "type": "(String | null)",
            "desc": "A content-type header value or null if not found"
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "replaceHeaderValue",
          "description": "Replace value for given header in the headers list.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 311,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headers",
              "type": "(Array | String | Object)",
              "description": "A headers object. Can be string, array of objects or\nHeaders object."
            },
            {
              "name": "name",
              "type": "String",
              "description": "Header name to be replaced."
            },
            {
              "name": "value",
              "type": "String",
              "description": "Header value to be repleced."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Updated headers."
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "getHeaderError",
          "description": "Get error message for given header string.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 351,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "(Header | Array | String)",
              "description": "A headers to check."
            }
          ],
          "return": {
            "type": "?String",
            "desc": "An error message or null if the headers are valid."
          },
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "send",
          "description": "Sends a request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 4
            },
            "end": {
              "line": 219,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "options",
              "type": "Object",
              "description": "API request object\n- url `String` The url to which the request is sent.\n- method `(string|undefined)` The HTTP method to use, default is GET.\n- payload `(ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object)`\nThe content for the request body for POST method.\n- headers `String` HTTP request headers.\n- withCredentials `(boolean|undefined)` Whether or not to send credentials on the request. Default is false.\n- timeout `(Number|undefined)` Timeout for request, in milliseconds.\n- id `String` Request ID"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_applyHeaders",
          "description": "Applies headers to the XHR object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xhr",
              "type": "XMLHttpRequest"
            },
            {
              "name": "headers",
              "type": "?String",
              "description": "HTTP headers string"
            }
          ]
        },
        {
          "name": "_progressHandler",
          "description": "Handler for the XHR `progress` event.\nIt sets `progress` property and dispatches `api-request-progress-changed`\ncustom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 4
            },
            "end": {
              "line": 265,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "progress",
              "type": "ProgressEvent"
            }
          ]
        },
        {
          "name": "_errorHandler",
          "description": "Handler for XHR `error` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "error",
              "type": "ProgressEvent",
              "description": "https://xhr.spec.whatwg.org/#event-xhr-error"
            }
          ]
        },
        {
          "name": "_timeoutHandler",
          "description": "Handler for XHR `timeout` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "error",
              "type": "ProgressEvent",
              "description": "https://xhr.spec.whatwg.org/#event-xhr-timeout"
            }
          ]
        },
        {
          "name": "_abortHandler",
          "description": "Handler for XHR `abort` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_loadEndHandler",
          "description": "Handler for XHR `loadend` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 334,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "abort",
          "description": "Aborts the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 342,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateStatus",
          "description": "Updates the status code and status text.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 347,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "parseResponse",
          "description": "Attempts to parse the response body of the XHR. If parsing succeeds,\nthe value returned will be deserialized based on the `responseType`\nset on the XHR.\n\nTODO: The `responseType` will always be empty string because\nsend function does not sets the response type.\nAPI request object does not support this property. However in the future\nit may actually send this information extracted from the AMF model.\nThis function will be ready to handle this case.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 4
            },
            "end": {
              "line": 404,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "*",
            "desc": "The parsed response,\nor undefined if there was an empty response or parsing failed."
          }
        },
        {
          "name": "collectHeaders",
          "description": "Collects response headers string from the XHR object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 4
            },
            "end": {
              "line": 416,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(String | undefined)"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 2
        },
        "end": {
          "line": 429,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "TransportElements.XhrSimpleRequestTransport",
      "attributes": [
        {
          "name": "is-payload",
          "description": "Set to true when the request can carry a payload.\nIt's required for calculating headers errors.",
          "sourceRange": {
            "file": "bower_components/headers-parser-behavior/headers-parser-behavior.html",
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 26
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "ArcBehaviors.HeadersParserBehavior"
        },
        {
          "name": "xhr",
          "description": "A reference to the XMLHttpRequest instance used to generate the\nnetwork request.",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 35,
              "column": 9
            }
          },
          "metadata": {},
          "type": "XMLHttpRequest"
        },
        {
          "name": "response",
          "description": "A reference to the parsed response body, if the `xhr` has completely\nresolved.",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 8
            },
            "end": {
              "line": 50,
              "column": 9
            }
          },
          "metadata": {},
          "type": "*"
        },
        {
          "name": "headers",
          "description": "A reference to response headers, if the `xhr` has completely\nresolved.",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "status",
          "description": "A reference to the status code, if the `xhr` has completely resolved.",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 8
            },
            "end": {
              "line": 71,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "status-text",
          "description": "A reference to the status text, if the `xhr` has completely resolved.",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 80,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "completes",
          "description": "A promise that resolves when the `xhr` response comes back, or rejects\nif there is an error before the `xhr` completes.\nThe resolve callback is called with the original request as an argument.\nBy default, the reject callback is called with an `Error` as an argument.\nIf `rejectWithRequest` is true, the reject callback is called with an\nobject with two keys: `request`, the original request, and `error`, the\nerror object.",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Promise"
        },
        {
          "name": "progress",
          "description": "An object that contains progress information emitted by the XHR if\navailable.",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 8
            },
            "end": {
              "line": 116,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "aborted",
          "description": "Aborted will be true if an abort of the request is attempted.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "errored",
          "description": "Errored will be true if the browser fired an error event from the\nXHR object (mainly network errors).",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 135,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "timed-out",
          "description": "TimedOut will be true if the XHR threw a timeout event.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 144,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "start-time",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "api-request-progress-changed",
          "description": "api-request-progress-changed\n\nDispatched with XHR progress event",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "xhr-simple-request-transport",
      "mixins": [
        "ArcBehaviors.HeadersParserBehavior"
      ]
    },
    {
      "description": "`xhr-simple-request`\nA XHR request that works with API components.\n\nIt handles `api-request` and `abort-api-request` custom events that control\nrequest flow in API components ecosystem.\n\nThis makes a request by using `XMLHttpRequest` object.\n\n## ARC request data model\n\nThe `api-request` custom event has to contain ARC (Advanced REST client)\nrequest data model. It expects the following properties:\n- url (`String`) - Request URL\n- method (`String`) - Request HTTP method.\n- headers (`String|undefined`) - HTTP headers string\n- payload (`String|FormData|File|ArrayBuffer|undefined`) Request body\n- id (`String`) **required**, request id. It can be any string, it must be unique.\n\nNote, this library does not validates the values and use them as is.\nAny error related to validation has to be handled by the application.\n\n## api-response data model\n\nWhen response is ready the element dispatches `api-response` custom event\nwith following properties in the detail object.\n- id (`String`) - Request incomming ID\n- request (`Object`) - Original request object from `api-request` event\n- loadingTime (`Number`) - High precise timing used by the performance API\n- isError (`Boolean`) - Indicates if the request is errored\n- error (`Error|undefined`) - Error object\n- response (`Object`) - The response data:\n - status (`Number`) - Response status code\n - statusText (`String`) - Response status text. Can be empty string.\n - body (`String|Document|ArrayBuffer|Blob`) - Response body\n - headers (`String|undefined`) - Response headers\n\nPlease note that aborting the request always sends `api-response` event\nwith `isError` set to true.",
      "summary": "",
      "path": "xhr-simple-request.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\""
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "activeRequests",
          "type": "Map.<String, XhrSimpleRequestTransport>",
          "description": "Map of active request objects.\nKeys in the map is request ID and vaue is instance of\n`XhrSimpleRequestTransport`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "loading",
          "type": "boolean",
          "description": "True while loading latest started requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "lastRequest",
          "type": "XhrSimpleRequestTransport",
          "description": "Latest used request object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 85,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 86,
              "column": 5
            },
            "end": {
              "line": 91,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 4
            },
            "end": {
              "line": 98,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_requestHandler",
          "description": "Handles for the `api-request` custom event. Transports the request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ]
        },
        {
          "name": "_aborthHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 139,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_createDetail",
          "description": "Creates a detail object for `api-response` cutom event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "XhrSimpleRequestTransport",
              "description": "Request object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request original ID"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The value of the `detail` property."
          }
        },
        {
          "name": "_responseHandler",
          "description": "Handles response from the transport.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 173,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            }
          ]
        },
        {
          "name": "_erroreHandler",
          "description": "Handles transport error",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 192,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "err",
              "type": "Object",
              "description": "Transport error object."
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            }
          ]
        },
        {
          "name": "_notifyResponse",
          "description": "Dispatches `api-response` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 206,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "detail",
              "type": "Object",
              "description": "Request and response data."
            }
          ]
        },
        {
          "name": "_discardRequest",
          "description": "Removes request from active requests.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID."
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 51,
          "column": 2
        },
        "end": {
          "line": 223,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "TransportElements.XhrSimpleRequest",
      "attributes": [
        {
          "name": "events-target",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "active-requests",
          "description": "Map of active request objects.\nKeys in the map is request ID and vaue is instance of\n`XhrSimpleRequestTransport`",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Map.<String, XhrSimpleRequestTransport>"
        },
        {
          "name": "loading",
          "description": "True while loading latest started requests.",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "last-request",
          "description": "Latest used request object.",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 85,
              "column": 9
            }
          },
          "metadata": {},
          "type": "XhrSimpleRequestTransport"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "api-response",
          "description": "api-response\n\nDispatched when the response is ready.\n\nFor list of parameters see element's documentation.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "loading-changed",
          "description": "Fired when the `loading` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-request-changed",
          "description": "Fired when the `lastRequest` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "xhr-simple-request",
      "mixins": [
        "ArcBehaviors.EventsTargetBehavior"
      ]
    }
  ]
}
